///////////////////////////////////////////////////////////
//  ConcreteHistory.cs
//  Implementation of the Class ConcreteHistory
//  Generated by Enterprise Architect
//  Created on:      30-Jan-2016 10:51:20
//  Original author: Dennis
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using Bibliotheken.CAEX_ClassModel;
using AMLHelperPlugin.Controller;
using AMLHelperPlugin.Model;
namespace AMLHelperPlugin.Model {
	/// <summary>
	/// History für Tabs.
	/// </summary>
	public class ConcreteHistory : History {

		private int currentIndex;
		private CAEXObject[] history;
		public AMLHelperPlugin.Controller.CAEXTreeView m_CAEXTreeView;
		public AMLHelperPlugin.Controller.TabController m_TabController;

		public ConcreteHistory(){

		}

		~ConcreteHistory(){

		}

		/// <summary>
		/// Löscht zunächst alle Elemente nach dem aktuellen Element.
		/// Fügt dann das neue Element hinzu und erhöht den Index um 1.
		/// </summary>
		/// <param name="element"></param>
		public void AddElementToHistory(CAEXTab element){

		}

		/// <summary>
		/// Entfernt alle Elemente nach dem aktuellen Index.
		/// Gibt true zurück, falls Elemente entfernt wurden, false wenn nicht.
		/// </summary>
		private bool ClearAfterCurrent(){

			return false;
		}

		/// <summary>
		/// Gibt das nächste Element in der Historie zurück. null wenn dieses nicht
		/// exisitiert.
		/// </summary>
		public override CAEXTab GetNextElement(){

			return null;
		}

		/// <summary>
		/// Gibt das vorherige Element zurück. Gibt null zurück, falls es dieses nicht gibt.
		/// 
		/// </summary>
		public override CAEXTab GetPreviousElement(){

			return null;
		}

		/// <summary>
		/// Fügt ein Element zur Historie hinzu.
		/// </summary>
		/// <param name="element"></param>
		public bool History.AddElementToHistory(Object element){

			return false;
		}

	}//end ConcreteHistory

}//end namespace Model