///////////////////////////////////////////////////////////
//  ConcreteTabPersistence.cs
//  Implementation of the Class ConcreteTabPersistence
//  Generated by Enterprise Architect
//  Created on:      30-Jan-2016 10:51:20
//  Original author: Team
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Controls;
using AMLHelper.Controller;
using AMLHelper.ElementExtraction;
using CAEX_ClassModel;

namespace AMLHelper.Model {
    /// <summary>
    /// Sorgt dafür, dass nach dem Schließen und erneuten Öffnen des AML-Helpers mit dem Selben Projekt die zuvor geöffneten Tabs
    /// wieder hergestellt werden
    /// </summary>
    public class ConcreteTabPersistence : AbstractTabPersistence {

        /// <summary>
        /// Instanz des TabHolders, der als API für das hinzufügen, entfernen und updaten von Tabs genutzt wird
        /// </summary>
        private readonly TabController _controller;

        public ConcreteTabPersistence(TabController controller)
        {

            _controller = controller;

        }

        /// <summary>
        /// Lädt die Namen der zuvor geöffneten und gespeicherten Tabs aus einer externen Datei
        /// </summary>
        /// <param name="filePath"></param>
        public override List<string> LoadOldTabs(string filePath) {

            if (_controller == null || filePath == null)
                return null;

            var content = new List<string>();

            try
            {
                using (var sreader = new StreamReader(filePath))
                {
                    string line;
                    while ((line = sreader.ReadLine()) != null)
                    {
                        content.Add(line);
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }


            return content;

		}

        /// <summary>
        /// Speichert die derzeit geöffneten Tabs in einer externen Datei
        /// </summary>
        /// <param name="filePath"></param>
        public override bool SaveCurrentTabs(string filePath){

            if (_controller == null || filePath == null)
                return false;

            var it = _controller.TabView.Items;

            var names = new string[it.Count];

            for(var i = 0; i < it.Count; i++)
            {
                var item = (TabItem) it[i];
                var elm = (CAEXElement)item.DataContext;

                var id = GetIdentifier(elm.Caex);
                if (id == null)
                {
                    return false;
                }
                names[i] = GetIdentifier(elm.Caex);

            }

            try {
                File.WriteAllLines(filePath, names);
            } catch (Exception) {
                return false;
            }
            
            return true;
        }

        /// <summary>
        /// Liefert die für die Tab-Zuordnung generierte ID.
        /// </summary>
        /// <param name="elm"></param>
        /// <returns></returns>
        public override string GetIdentifier(CAEXObject elm) {
            if (elm == null)
            {
                return null;
            }

            CAEXBasicObject parent;
            try
            {
                parent = elm.GetParent();
            }
            catch (Exception)
            {
                return null;
            }
            
             if (elm.ID.Exists())
             {
                 if (parent is CAEXObject)
                 {
                     var add = GetIdentifier((CAEXObject) elm.GetParent());
                     if (add != null)
                         return elm.ID.Value + add;
                     return null;
                 }
                 return elm.ID.Value;
             }

            if (elm.Name.Exists())
            {
                if (parent is CAEXObject)
                {
                    var add = GetIdentifier((CAEXObject)elm.GetParent());
                    if (add != null)
                        return elm.Name.Value + add;
                    return null;
                }
                return elm.Name.Value;
            }
            return null;
        }

	}//end ConcreteTabPersistence

}//end namespace Model