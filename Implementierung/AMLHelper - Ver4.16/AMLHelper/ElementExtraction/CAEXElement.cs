///////////////////////////////////////////////////////////
//  CAEXTab.cs
//  Implementation of the Class CAEXTab
//  Generated by Enterprise Architect
//  Created on:      30-Jan-2016 10:51:20
//  Original author: Team
///////////////////////////////////////////////////////////


using System.ComponentModel;
using CAEX_ClassModel;
using System.Windows.Controls;
using AMLHelper.Model;
using System.Collections.ObjectModel;

namespace AMLHelper.ElementExtraction {
	/// <summary>
	/// Kapselt ein CAEXObject und alle Daten, die der AMLHelper mit diesem CAEXObject assoziert.
	/// </summary>
	// ReSharper disable once InconsistentNaming
	public class CAEXElement : INotifyPropertyChanged {

		/// <summary>
		/// Der ursprüngliche Name den das zugrundliegende CAEXObject im XML Format hat
		/// </summary>
        public string OriginalName;
        /// <summary>
        /// Der Name den dieses CAEXElement derzeit im AMLEditor hat, dieser muss nicht zwingend identisch sein mit dem ursprünglichen Namen
        /// </summary>
        private string _name;
        /// <summary>
        /// Das zugrundliegende CAEXObject, welches durch dieses Instanz repräsentiert wird
        /// </summary>
        private CAEXObject _caex;
        public bool NameChanged;
        public TreeViewItem TreeItem { get; set; }
        private ObservableCollection<CAEXElement> _parentElements;
        public ObservableCollection<CAEXElement> ParentElements
        {
            get
            {
                return _parentElements;
            }
            set
            {
                if (value != _parentElements)
                {
                    _parentElements = value;
                    OnPropertyChanged("ParentElements");
                }
            }
        }
        private ObservableCollection<CAEXElement> _childElements;
        public ObservableCollection<CAEXElement> ChildElements
        {
            get
            {
                return _childElements;
            }
            set
            {
                if (value != _childElements)
                {
                    _childElements = value;
                    OnPropertyChanged("ChildElements");
                }
                
            }
        }
		/// <summary>
		/// Der Tab in dem dieses Element derzeit geöffnet ist oder null falls es nicht geöffnet ist
		/// </summary>
        public Tab Tab = null;

        /// <summary>
        /// Das Bild, welches zur Darstellung/Identifikation dieses Typs von CAEXElement genutzt wird
        /// </summary>
        public string ImageSource
        {
            get
            {
                if (_caex is InstanceHierarchyType)
                {
                    return "/AMLHelper;component/Properties/Instance.jpg";
                }
                else if (_caex is InternalElementType)
                {
                    return "/AMLHelper;component/Properties/InternalElement.jpg";
                }
                else if (_caex is InterfaceClassType)
                {
                    return "/AMLHelper;component/Properties/Interface.jpg";
                }
                else
                {
                    return null;
                }
            }
        }

        public CAEXObject Caex { get { return _caex; } set {_caex = value; } }

        /// <summary>
        /// Der Name dieses CAEXElements
        /// </summary>
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (value != _name)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                    
                    if (OriginalName == value)
                    {
                        FileInstance.NumberOfChangesMade--;
                        NameChanged = false;
                    }
                    else if(!NameChanged)
                    {
                        FileInstance.NumberOfChangesMade++;
                        NameChanged = true;
                    }
                    if (_caex != null)
                    {
                        Caex.Name.Value = value;
                    } //Name auch im zugrundeliegenden CAEX Element ändern.
                }
            }
        }

        public CAEXElement()
        {
            _childElements = new ObservableCollection<CAEXElement>();
        }

	    #region INotifyPropertyChanged Member

        /// <summary>
        /// Tritt ein, wenn sich ein Eigenschaftswert ändert.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Called when [property changed].
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        public void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion INotifyPropertyChanged Member

        public override string ToString()
        {

            if (Caex != null && Caex.Name.Exists())
            {
                if (Caex.GetParent() != null && Caex.GetParent() is CAEXObject && ((CAEXObject) Caex.GetParent()).Name.Exists())
                {
                    return Caex.Name.Value + " (" + ((CAEXObject)Caex.GetParent()).Name.Value + ")";
                }
                return Caex.Name.Value;
            }
            else
            {
                return "unbenanntes Element";
            }
            
        }


	}//end CAEXTab

}//end namespace ElementExtraction