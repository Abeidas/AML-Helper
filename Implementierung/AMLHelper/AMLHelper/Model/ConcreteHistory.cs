///////////////////////////////////////////////////////////
//  ConcreteHistory.cs
//  Implementation of the Class ConcreteHistory
//  Generated by Enterprise Architect
//  Created on:      30-Jan-2016 10:51:20
//  Original author: Dennis
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using AMLHelper.Controller;
using AMLHelper.ElementExtraction;
using System.ComponentModel;

namespace AMLHelper.Model {

	/// <summary>
	/// Speichert die Tab Historie in einer Liste, wobei die neueren Elemente am Ende der Liste sind.
	/// </summary>
	public class ConcreteHistory : IHistory {

        /// <summary>
        /// Index des Elements in der History, welches momentan geöffnet ist, bzw bei welchem wir uns derzeit befinden
        /// </summary>
        private int _currentIndex;

        /// <summary>
        /// Gibt an, ob es sich aktuell um das letzte Element in der History handelt.
        /// </summary>
        private bool _isLast = true;
        public bool backwardButton_enable
        {
            get
            {
                return !_isLast;
            }
            set
            {
                _isLast = value;
            }
        }

        /// <summary>
        /// Gibt an, ob es sich aktuell um das erste Element in der History handelt.
        /// </summary>
        private bool _isFirst = true;
        public bool forwardButton_enable
        {
            get
            {
                return !_isFirst;
            }
            set
            {
                _isFirst = value;
            }
        }

        /// <summary>
        /// Die maximale Anzahl von Elementen die gespeichert wird
        /// </summary>
        private readonly int MAXIMUM_HISTORY_STORED = 10;

        /// <summary>
        /// Liste von CAEXElementen, die zuvor geöffnet wurden. Zuletzt geöffnete Elemente sind am Ende der Liste
        /// </summary>
        private List <CAEXElement> history;

        /// <summary>
        /// Referenz auf den Baum Handler
        /// </summary>
        public CaexTreeView m_CAEXTreeView;

        /// <summary>
        /// Referenz auf den Tab Handler
        /// </summary>
        public TabController m_TabController;

		public ConcreteHistory(){
            history = new List<CAEXElement>();
            _currentIndex = -1;
		}

        public ConcreteHistory(CAEXElement startElement) : this()
        {
            AddElementToHistory(startElement);
        }

		/// <summary>
		/// Löscht zunächst alle Elemente nach dem aktuellen Element.
		/// Fügt dann das neue Element hinzu und erhöht den Index um 1, falls nötig.
		/// </summary>
		/// <param name="element"></param>
		public void AddElementToHistory(CAEXElement element){
            ClearAfterCurrent();
            if (history.Count > MAXIMUM_HISTORY_STORED)
            {
                //Ältestes Element rauswerfen
                history.RemoveAt(0);
                _currentIndex--;
            }
            history.Add(element);
            _currentIndex++;
            OnPropertyChanged("changeButtons");
        }

		/// <summary>
		/// Entfernt alle Elemente nach dem aktuellen Index.
		/// Gibt true zurück, falls Elemente entfernt wurden, false wenn nicht.
		/// </summary>
		private bool ClearAfterCurrent(){
            bool removed = false;
            while (history.Count > _currentIndex + 1)
            {
                removed = true;
                history.RemoveAt(history.Count - 1);
            }
			return removed;
		}

        /// <summary>
        /// Gibt das vorherige Element zurück und gibt null zurück, falls es dieses nicht gibt.
        /// Falls es existiert wird der index Zeiger auf dieses bewegt und
        /// es wird als neues derzeitiges Element akzeptiert
        /// </summary>
		public CAEXElement GoToPreviousElement(){
            var previous = PeekPreviousElement();
            if (previous != null)
            {
                _currentIndex--;
                OnPropertyChanged("changeButtons");
            } else
            {
                OnPropertyChanged("changeButtons");
            }
            return previous;
        }

        /// <summary>
        /// Gibt das vorherige Element zurück oder gibt null zurück, falls es dieses nicht gibt.
        /// Hierbei wird das derzeitige Element nicht verändert
        /// </summary>
        public CAEXElement PeekPreviousElement()
        {
            return _currentIndex > 0 ? history[_currentIndex - 1] : null;
        }

	    /// <summary>
        /// Gibt das nächste Element in der Historie zurück oder null wenn dieses nicht
        /// exisitiert. Falls es existiert wird der index Zeiger auf dieses bewegt und
        /// es wird als neues derzeitiges Element akzeptiert
        /// </summary>
        public CAEXElement GoToNextElement()
        {
            var next = PeekNextElement();
            if (next != null)
            {
                _currentIndex++;
                OnPropertyChanged("changeButtons");
            }
            else
            {
                OnPropertyChanged("changeButtons");
            }
            return next;
        }

        /// <summary>
        /// Gibt das nächste Element zurück oder gibt null zurück, falls es dieses nicht gibt.
        /// Hierbei wird das derzeitige Element nicht verändert
        /// </summary>
        public CAEXElement PeekNextElement()
        {
            return history.Count > _currentIndex + 1 ? history[_currentIndex + 1] : null;
        }

        #region INotifyPropertyChanged Member

        /// <summary>
        /// Tritt ein, wenn sich ein Eigenschaftswert ändert.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        public void OnPropertyChanged(string propertyName)
        {
            _isFirst = (_currentIndex == 0);
            _isLast = (_currentIndex == (history.Count - 1));

            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #endregion INotifyPropertyChanged Member

    }//end ConcreteHistory

}//end namespace Model