///////////////////////////////////////////////////////////
//  ConfigurationHandler.cs
//  Implementation of the Class ConfigurationHandler
//  Generated by Enterprise Architect
//  Created on:      30-Jan-2016 10:51:20
//  Original author: Team
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;
using AMLHelper.Model;
using CAEX_ClassModel;

namespace AMLHelper.Controller {
	/// <summary>
	/// Diese Klasse stellt Methoden zum Laden und Speichern der Projektdatei zur
	/// Verfügung. In der Projektdatei werden die zuletzt geöffneten Tabs, sowie
	/// weitere Einstellungsmöglichkeiten gespeichert.
	/// </summary>
    /// 
   

	public sealed class ConfigurationHandler {

        /// <summary>
        /// Instanz die für die Tab Persistenz genutzt wird
        /// </summary>
        private readonly AbstractTabPersistence _mAbstractTabPersistence;

        public ConfigurationHandler(TabController controller)
        {
            _mAbstractTabPersistence = new ConcreteTabPersistence(controller);
        }

	    /// <summary>
		/// Lädt eine Konfigurationsdatei vom spezifizierten Pfad.
		/// </summary>
		/// <param name="path">Pfad zur Konfigurationsdatei</param>
		public List<string> LoadConfiguration(string path){

            return _mAbstractTabPersistence.LoadOldTabs(path);

		}

        /// <summary>
        /// Lädt eine Konfigurationsdatei "config.txt"; Nutzt dabei AppData-Verzeichnis
        /// </summary>
        /// <returns></returns>
        public List<string> LoadConfiguration()
        {

            return _mAbstractTabPersistence.LoadOldTabs(GetPath());

        }

		/// <summary>
		/// Speichert eine Konfigurationsdatei am spezifizierten Pfad.
		/// </summary>
		/// <param name="path">Pfad zur Konfigurationsdatei</param>
		public bool SaveConfiguration(string path){
            
            return _mAbstractTabPersistence.SaveCurrentTabs(path);

		}


        /// <summary>
        /// Speichert eine Konfigurationsdatei "config.txt"; Nutzt dabei AppData-Verzeichnis
        /// </summary>
        /// <returns></returns>
        public bool SaveConfiguration()
        {

            return _mAbstractTabPersistence.SaveCurrentTabs(GetPath());

        }

        /// <summary>
        /// Liefert die für die Tab-Zuordnung verwendete ID.
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public string GetIdentifier(CAEXObject obj)
        {
            return _mAbstractTabPersistence.GetIdentifier(obj);
        }

        /// <summary>
        /// liefert den Pfad zur Datei im AppData-Verzeichnis und legt "AMLHelper" im AppData-Verzeichnis an,
        /// sofern noch nicht existent
        /// </summary>
        /// <returns></returns>
        private static string GetPath()
        {
            var path = FileInstance.GetInstance().AmlFilePath;

            if (path == null) return null;

            string[] delimiters = { "\\" };
            var parts = path.Split(delimiters, StringSplitOptions.None);

            try
            {
                var pathToFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "AMLHelper");
                Directory.CreateDirectory(pathToFolder);
                return Path.Combine(pathToFolder, parts[parts.Length - 1] + ".config.txt");
            }
            catch (Exception)
            {
                return null;
            }
        }

	}//end ConfigurationHandler

}//end namespace Controller