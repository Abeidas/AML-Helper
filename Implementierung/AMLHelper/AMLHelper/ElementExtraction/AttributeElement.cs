///////////////////////////////////////////////////////////
//  AttributeElement.cs
//  Implementation of the Class AttributeElement
//  Generated by Enterprise Architect
//  Created on:      30-Jan-2016 10:51:19
//  Original author: Team
///////////////////////////////////////////////////////////

using System;
using CAEX_ClassModel;
using System.Collections.ObjectModel;
using AMLHelper.Model;

namespace AMLHelper.ElementExtraction
{
    public class AttributeElement : CAEXElement
    {

        /// <summary>
        /// 
        /// Beschreibung dieses Attributs, benutzt die Funktion OnPropertyChanged
        /// </summary>
        private string _description;
        private readonly string _originalDescription;
        private bool _descriptionChanged;

        /// <summary>
        /// Momentaner Wert dieses Attributs, benutzt die Funktion OnPropertyChanged
        /// </summary>
        private string _value;
        private readonly string _originalValue;
        private bool _valueChanged;

        /// <summary>
        /// Standardwert dieses Attributs, benutzt die Funktion OnPropertyChanged
        /// </summary>
        private string _defaultValue;
        private readonly string _originalDefaultValue;
        private bool _defaultValueChanged;
        
        /// <summary>
        /// Einheit in der dieses Attribut gemessen wird, benutzt die Funktion OnPropertyChanged
        /// </summary>
        private string _unit;
        private readonly string _originalUnit;
        private bool _unitChanged;
        
        /// Datentyp dieses Attributs, benutzt die Funktion OnPropertyChanged
        /// </summary>
        private string _dataType;
        private readonly string _originaldataType;
        private bool _dataTypeChanged;
        int _numberOfLocalChanges = 0;

        /// <summary>
        /// Die diesem Attribut weiter untergeordneten Attribute
        /// </summary>
        public ObservableCollection<AttributeElement> ChildAttributes;

        /// <summary>
        /// Beschreibung dieses Attributs
        /// </summary>
        public string Description
        {
            get { return _description; }
            set
            {
                if (value != _description)
                {
                    _description = value;
                    UpdateNumberOfChanges(1, _description == _originalDescription, _descriptionChanged);
                    OnPropertyChanged("Description");
                    if (Caex != null)
                    {
                        Caex.Description.Value = value;
                    }
                }
            }
        }

        /// <summary>
        /// Momentaner Wert dieses Attributs
        /// </summary>
        public string Value
        {
            get { return _value; }
            set
            {
                if (value != _value)
                {
                    _value = value;
                    UpdateNumberOfChanges(2, _value == _originalValue, _valueChanged);
                    OnPropertyChanged("Value");
                    if (Caex != null)
                    {
                        ((AttributeType)Caex).Value = value;
                    }
                }
            }
        }

        /// <summary>
        /// Standardwert dieses Attributs, falls keiner angegeben wurde
        /// </summary>
        public string DefaultValue
        {
            get { return _defaultValue; }
            set
            {
                
                if (value != _defaultValue)
                {
                    _defaultValue = value;
                    UpdateNumberOfChanges(3, _defaultValue == _originalDefaultValue, _defaultValueChanged);
                    OnPropertyChanged("DefaultValue");
                    if (Caex != null)
                    {
                        ((AttributeType)Caex).DefaultValue = value;
                    }
                }
            }
        }

        /// <summary>
        /// Einheit in der der Wert dieses Attributs gemessen wird
        /// </summary>
        public string Unit
        {
            get { return _unit; }
            set
            {
                if (value != _unit)
                {
                    _unit = value;
                    UpdateNumberOfChanges(4, _unit == _originalUnit, _unitChanged);
                    OnPropertyChanged("Unit");
                    if (Caex != null)
                    {
                        ((AttributeType)Caex).Unit.Value = value;
                    }
                }
            }
        }

        /// <summary>
        /// Datentyp dieses Attributs
        /// </summary>
        public string DataType
        {
            get
            {
                    try
                    {
                        _dataType = ((AttributeType)Caex).AttributeDataType.Value;
                    }
                    catch (NullReferenceException e)
                    {
                        _dataType = "N/A";
                    }
                return _dataType;
                
            }
            set
            {
                if (value != _dataType)
                {
                    _dataType = value;
                    UpdateNumberOfChanges(5, _dataType == _originaldataType, _dataTypeChanged);
                    OnPropertyChanged("DataType");
                    if (Caex != null)
                    {
                         ((AttributeType)Caex).AttributeDataType.Value = value;
                    }
                }

            }
        }

        public AttributeElement(AttributeType caex)
        {
            var tempNumOfChangesMade = FileInstance.NumberOfChangesMade;

            Caex = caex;
            //Abfrage auf null für alle Elemente.
            if (caex.Name != null)
            {
                Name = caex.Name.Value;
                OriginalName = Name;
            }
            if (caex.Description != null)
            {
                _description = caex.Description.Value;
                _originalDescription = _description;
            }
            else
            {
                caex.New_Description();
            }

            if (caex.Value != null)
            {
                _value = caex.Value;
                _originalValue = _value;
            }
            else
            {
                caex.New_Value();
            }

            if (caex.DefaultValue != null)
            {
                try
                {
                    _defaultValue = caex.DefaultValue;
                    _originalDefaultValue = _defaultValue;
                }
                catch (NullReferenceException e)
                {
                    _defaultValue = "";
                    _originalDefaultValue = "";
                }
            }
            else
            {
                caex.New_DefaultValue();
            }
            if (caex.Unit != null)
            {
                try
                {
                    _unit = caex.Unit.Value;
                    _originalUnit = _unit;
                }
                catch (NullReferenceException e)
                {
                    _unit = "";
                    _originalUnit = "";
                }

            }

            _dataTypeChanged = false;
            _defaultValueChanged = false;
            _descriptionChanged = false;
            _unitChanged = false;
            _valueChanged = false;
            _numberOfLocalChanges = 0;
            FileInstance.NumberOfChangesMade = tempNumOfChangesMade;
        }

        ~AttributeElement()
        {

        }
        private void UpdateNumberOfChanges(short indexOfAttribute, bool boolean, bool alreadyChanged)
        {
            if (!boolean)
            {
                if (_numberOfLocalChanges == 0)
                {
                    FileInstance.NumberOfChangesMade++;
                }
                if (!alreadyChanged)
                {
                    _numberOfLocalChanges++;
                    switch (indexOfAttribute)
                    {
                        case 1: _descriptionChanged = true; break;
                        case 2: _valueChanged = true; break;
                        case 3: _defaultValueChanged = true; break;
                        case 4: _unitChanged = true; break;
                        case 5: _dataTypeChanged = true; break;
                    }
                }
            }
            else
            {
                if (_numberOfLocalChanges == 1)
                {
                    FileInstance.NumberOfChangesMade--;
                }
                if (alreadyChanged)
                {
                    _numberOfLocalChanges--;
                    switch (indexOfAttribute)
                    {
                        case 1: _descriptionChanged = false; break;
                        case 2: _valueChanged = false; break;
                        case 3: _defaultValueChanged = false; break;
                        case 4: _unitChanged = false; break;
                        case 5: _dataTypeChanged = false; break;
                    }
                }
            }
        }
    }//end AttributeElement

}//end namespace ElementExtraction